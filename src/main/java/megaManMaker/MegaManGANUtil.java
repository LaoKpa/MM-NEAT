package megaManMaker;

import java.awt.Point;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

import edu.southwestern.parameters.Parameters;
import edu.southwestern.tasks.mario.gan.GANProcess;
import edu.southwestern.tasks.mario.gan.reader.JsonReader;

import edu.southwestern.util.random.RandomNumbers;

public class MegaManGANUtil {
	public static final int LATENT_VECTOR_SIZE = 5;//latent vector dimension, 20 improved the model 
	public static final int MEGA_MAN_ALL_TERRAIN = 7; //number of tiles in MegaMan
	public static final int MEGA_MAN_FIRST_LEVEL_ALL_TILES = 21; //number of tiles in MegaMan
	
	
//	public static Level generateLevelFromGAN(double[] latentVector) {
//		List<List<Integer>> oneLevel = getLevelListRepresentationFromGAN(latentVector);
//		// Create one level from the merged level representation
//		Level level = Parameters.parameters.booleanParameter("marioGANUsesOriginalEncoding") ? OldLevelParser.createLevelJson(oneLevel) : LevelParser.createLevelJson(oneLevel);
//		return level;
//	}
	/**
	 * Renders a level that was generated by the GAN 
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		GANProcess.type = GANProcess.GAN_TYPE.MEGA_MAN; //sets GAN type to LodeRunner
		Parameters.initializeParameterCollections(new String[] {"GANInputSize:"+LATENT_VECTOR_SIZE});//input size is the size of the latent vector
		double[] latentVector = RandomNumbers.randomArray(LATENT_VECTOR_SIZE); //fills array of input size randomly
		List<List<Integer>> oneLevel = generateOneLevelListRepresentationFromGAN(latentVector); //one level to render
		BufferedImage[] images = MegaManRenderUtil.loadImagesForASTAR(MegaManRenderUtil.MEGA_MAN_TILE_PATH); //Initializes the array that hold the tile images
		MegaManRenderUtil.getBufferedImage(oneLevel,images);//rendered level and displays it in a window 
		GANProcess.terminateGANProcess(); //ends GAN process 
	}

	/**
	 * Gets a set of all of the levels from the latent vector 
	 * @param latentVector
	 * @return Set of all the levels
	 */
	public static List<List<List<Integer>>> getLevelListRepresentationFromGAN(double[] latentVector){
//		latentVector = GANProcess.mapArrayToOne(latentVector); 
//		// Generate level from vector
//		try {
//			GANProcess.getGANProcess().commSend("[" + Arrays.toString(latentVector) + "]");
//		} catch (IOException e) {
//			e.printStackTrace();
//			System.exit(1); // Cannot continue without the GAN process
//		}
//		String level = GANProcess.getGANProcess().commRecv(); // Response to command just sent
//		level = "["+level+"]"; // Wrap level in another json array
//		List<List<List<Integer>>> levels = JsonReader.JsonToInt(level);
//		return levels;
		
		latentVector = GANProcess.mapArrayToOne(latentVector); // Range restrict the values
		int chunk_length = Integer.valueOf(GANProcess.getGANProcess().GANDim);
		String levelString = "";
		for(int i = 0; i < latentVector.length; i+=chunk_length){
			double[] chunk = Arrays.copyOfRange(latentVector, i, i+chunk_length);
			// Generate a level from the vector
			// Brackets required since generator.py expects of list of multiple levels, though only one is being sent here
			try {
				GANProcess.getGANProcess().commSend("[" + Arrays.toString(chunk) + "]");
			} catch (IOException e) {
				e.printStackTrace();
				System.exit(1); // Cannot continue without the GAN process
			}
			String oneLevelChunk = GANProcess.getGANProcess().commRecv(); // Response to command just sent
			levelString = levelString + ", " + oneLevelChunk;  
		}
		// These two lines remove the , from the first append to an empty string
		levelString = levelString.replaceFirst(",", "");
		levelString = levelString.replaceFirst(" ", "");
		levelString = "["+levelString+"]"; // Make a bundle of several levels
		// Create one level from all
		List<List<List<Integer>>> allLevels = JsonReader.JsonToInt(levelString);
		// This list contains several separate levels. The following code
		// merges the levels by appending adjacent rows
		List<List<Integer>> oneLevel = new ArrayList<List<Integer>>();
		// Create the appropriate number of rows in the array
		for(@SuppressWarnings("unused") List<Integer> row : allLevels.get(0)) { // Look at first level (assume all are same size)
			oneLevel.add(new ArrayList<Integer>()); // Empty row
		}
		// Now fill up the rows, one level at a time
		for(List<List<Integer>> aLevel : allLevels) {
			int index = 0;
			for(List<Integer> row : aLevel) { // Loot at each row
				oneLevel.get(index++).addAll(row);
			}	
		}
		return allLevels;
	}

	/**
	 * Gets one level from the list of levels, chooses the first one in the list  
	 * @param latentVector
	 * @return A single level 
	 */
	public static List<List<Integer>> generateOneLevelListRepresentationFromGAN(double[] latentVector) {
		List<List<List<Integer>>> levelInList = getLevelListRepresentationFromGAN(latentVector);
		List<List<Integer>> oneLevel = levelInList.get(0); // gets first level in the set 
		//List<List<Integer>> fullLevel = new ArrayList<List<Integer>>();
		for(int level = 1;level<levelInList.size();level++) {
			for(int i = 0;i<oneLevel.size();i++) {
				//for(int integer = 0; integer<oneLevel.get(0).size();integer++) {
				oneLevel.get(i).addAll(levelInList.get(level).get(i));

				
			}
		}
		
		
		return oneLevel;
	}
	public static List<List<Integer>> generateOneLevelListRepresentationFromGANVertical(double[] latentVector) {
		List<List<List<Integer>>> levelInList = getLevelListRepresentationFromGAN(latentVector);
		List<List<Integer>> oneLevel = levelInList.get(0); // gets first level in the set 
		//List<List<Integer>> fullLevel = new ArrayList<List<Integer>>();
		for(int level = 1;level<levelInList.size();level++) {
			//for(int i = 0;i<oneLevel.size();i++) {
				//for(int integer = 0; integer<oneLevel.get(0).size();integer++) {
				oneLevel.addAll(levelInList.get(level));

				
			//}
		}
		
		
		return oneLevel;
	}
	
	public static List<List<Integer>> generateOneLevelListRepresentationFromGANVerticalAndHorizontal(double[] latentVector) {
		List<List<List<Integer>>> levelInList = getLevelListRepresentationFromGAN(latentVector);
		int screensWide = 1;
		int screensTall = 1;
		int screenWidth = 16;
		int screenHeight = 14;
		List<Point> allPreviousMoves = new ArrayList<Point>();
		int numberOfChunks = levelInList.size();
		boolean right;
		List<List<Integer>> oneLevel = levelInList.get(0); // gets first level in the set 
		allPreviousMoves.add(new Point(0,0));
		Random rand = new Random(Double.doubleToLongBits(latentVector[0]));
		//List<List<Integer>> fullLevel = new ArrayList<List<Integer>>();
		for(int level = 1;level<numberOfChunks;level++) {
			right = rand.nextBoolean();

			//for(int i = 0;i<oneLevel.size();i++) {
				//for(int integer = 0; integer<oneLevel.get(0).size();integer++) {.
				
			if(right) {
				
			}else {
				
			}
				oneLevel.addAll(levelInList.get(level));

				
			//}
		}
		
		
		return oneLevel;
	}

}
