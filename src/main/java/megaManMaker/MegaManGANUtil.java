package megaManMaker;

import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import edu.southwestern.parameters.Parameters;
import edu.southwestern.tasks.mario.gan.GANProcess;
import edu.southwestern.tasks.mario.gan.reader.JsonReader;
import edu.southwestern.util.random.RandomNumbers;

public class MegaManGANUtil {
	public static final int LATENT_VECTOR_SIZE = 5;//latent vector dimension, 20 improved the model 
	public static final int MEGA_MAN_ALL_TERRAIN = 7; //number of tiles in MegaMan
	public static final int MEGA_MAN_FIRST_LEVEL_ALL_TILES = 21; //number of tiles in MegaMan
	
	/**
	 * Renders a level that was generated by the GAN 
	 * @param args
	 * @throws IOException 
	 */
	public static void main(String[] args) throws IOException {
		GANProcess.type = GANProcess.GAN_TYPE.MEGA_MAN; //sets GAN type to LodeRunner
		Parameters.initializeParameterCollections(new String[] {"GANInputSize:"+LATENT_VECTOR_SIZE});//input size is the size of the latent vector
		double[] latentVector = RandomNumbers.randomArray(LATENT_VECTOR_SIZE); //fills array of input size randomly
		List<List<Integer>> oneLevel = generateOneLevelListRepresentationFromGAN(latentVector); //one level to render
		BufferedImage[] images = MegaManRenderUtil.loadImagesForASTAR(MegaManRenderUtil.MEGA_MAN_TILE_PATH); //Initializes the array that hold the tile images
		MegaManRenderUtil.getBufferedImage(oneLevel,images);//rendered level and displays it in a window 
		GANProcess.terminateGANProcess(); //ends GAN process 
	}

	/**
	 * Gets a set of all of the levels from the latent vector 
	 * @param latentVector
	 * @return Set of all the levels
	 */
	public static List<List<List<Integer>>> getLevelListRepresentationFromGAN(double[] latentVector){
		latentVector = GANProcess.mapArrayToOne(latentVector); 
		// Generate level from vector
		try {
			GANProcess.getGANProcess().commSend("[" + Arrays.toString(latentVector) + "]");
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1); // Cannot continue without the GAN process
		}
		String level = GANProcess.getGANProcess().commRecv(); // Response to command just sent
		level = "["+level+"]"; // Wrap level in another json array
		List<List<List<Integer>>> levels = JsonReader.JsonToInt(level);
		return levels;
	}

	/**
	 * Gets one level from the list of levels, chooses the first one in the list  
	 * @param latentVector
	 * @return A single level 
	 */
	public static List<List<Integer>> generateOneLevelListRepresentationFromGAN(double[] latentVector) {
		List<List<List<Integer>>> levelInList = getLevelListRepresentationFromGAN(latentVector);
		List<List<Integer>> oneLevel = levelInList.get(0); // gets first level in the set  
		return oneLevel;
	}

}
