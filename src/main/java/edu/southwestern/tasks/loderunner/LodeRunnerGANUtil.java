package edu.southwestern.tasks.loderunner;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import edu.southwestern.parameters.Parameters;
import edu.southwestern.tasks.mario.gan.GANProcess;
import edu.southwestern.tasks.mario.gan.reader.JsonReader;
import edu.southwestern.util.random.RandomNumbers;

/**
 * 
 * @author kdste
 *
 */
public class LodeRunnerGANUtil {
	public static final int LODE_RUNNER_TILE_NUMBER = 8; //number of tiles in LodeRunner 

	/**
	 * Renders a level that was generated by the GAN 
	 * @param args
	 */
	public static void main(String[] args) {
		int size = 22; //latent vector dimension
		GANProcess.type = GANProcess.GAN_TYPE.LODE_RUNNER;
		Parameters.initializeParameterCollections(new String[] {"GANInputSize:"+size});

		double[] latentVector = RandomNumbers.randomArray(size);
		List<List<Integer>> oneLevel = generateOneLevelListRepresentationFromGAN(latentVector);

		GANProcess.terminateGANProcess();
	}

	public static List<List<List<Integer>>> getLevelListRepresentationFromGAN(double[] latentVector){
		latentVector = GANProcess.mapArrayToOne(latentVector); 
		// Generate room from vector
		try {
			GANProcess.getGANProcess().commSend("[" + Arrays.toString(latentVector) + "]");
		} catch (IOException e) {
			e.printStackTrace();
			System.exit(1); // Cannot continue without the GAN process
		}
		String level = GANProcess.getGANProcess().commRecv(); // Response to command just sent
		level = "["+level+"]"; // Wrap room in another json array
		List<List<List<Integer>>> levels = JsonReader.JsonToInt(level);

		return levels;
	}

	public static List<List<Integer>> generateOneLevelListRepresentationFromGAN(double[] latentVector) {
		List<List<List<Integer>>> roomInList = getLevelListRepresentationFromGAN(latentVector);
		List<List<Integer>> result = roomInList.get(0); // Only contains first level generated 
		return result;
	}




}
